/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ArticleDto } from '../models/article-dto';
import { articlesCreate } from '../fn/articles/articles-create';
import { ArticlesCreate$Params } from '../fn/articles/articles-create';
import { articlesFindAll } from '../fn/articles/articles-find-all';
import { ArticlesFindAll$Params } from '../fn/articles/articles-find-all';
import { articlesFindAllPublic } from '../fn/articles/articles-find-all-public';
import { ArticlesFindAllPublic$Params } from '../fn/articles/articles-find-all-public';
import { articlesFindOne } from '../fn/articles/articles-find-one';
import { ArticlesFindOne$Params } from '../fn/articles/articles-find-one';
import { articlesRemove } from '../fn/articles/articles-remove';
import { ArticlesRemove$Params } from '../fn/articles/articles-remove';
import { articlesUpdate } from '../fn/articles/articles-update';
import { ArticlesUpdate$Params } from '../fn/articles/articles-update';

@Injectable({ providedIn: 'root' })
export class ArticlesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `articlesFindAll()` */
  static readonly ArticlesFindAllPath = '/api/articles';

  /**
   * Get all articles.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `articlesFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesFindAll$Response(params?: ArticlesFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ArticleDto>>> {
    return articlesFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all articles.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `articlesFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesFindAll(params?: ArticlesFindAll$Params, context?: HttpContext): Observable<Array<ArticleDto>> {
    return this.articlesFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ArticleDto>>): Array<ArticleDto> => r.body)
    );
  }

  /** Path part for operation `articlesCreate()` */
  static readonly ArticlesCreatePath = '/api/articles';

  /**
   * Create new article.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `articlesCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  articlesCreate$Response(params: ArticlesCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ArticleDto>> {
    return articlesCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new article.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `articlesCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  articlesCreate(params: ArticlesCreate$Params, context?: HttpContext): Observable<ArticleDto> {
    return this.articlesCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ArticleDto>): ArticleDto => r.body)
    );
  }

  /** Path part for operation `articlesFindAllPublic()` */
  static readonly ArticlesFindAllPublicPath = '/api/articles/public';

  /**
   * Get all public articles.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `articlesFindAllPublic()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesFindAllPublic$Response(params?: ArticlesFindAllPublic$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ArticleDto>>> {
    return articlesFindAllPublic(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all public articles.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `articlesFindAllPublic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesFindAllPublic(params?: ArticlesFindAllPublic$Params, context?: HttpContext): Observable<Array<ArticleDto>> {
    return this.articlesFindAllPublic$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ArticleDto>>): Array<ArticleDto> => r.body)
    );
  }

  /** Path part for operation `articlesFindOne()` */
  static readonly ArticlesFindOnePath = '/api/articles/{id}';

  /**
   * Get article by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `articlesFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesFindOne$Response(params: ArticlesFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ArticleDto>> {
    return articlesFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Get article by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `articlesFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesFindOne(params: ArticlesFindOne$Params, context?: HttpContext): Observable<ArticleDto> {
    return this.articlesFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ArticleDto>): ArticleDto => r.body)
    );
  }

  /** Path part for operation `articlesRemove()` */
  static readonly ArticlesRemovePath = '/api/articles/{id}';

  /**
   * Delete article.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `articlesRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesRemove$Response(params: ArticlesRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return articlesRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete article.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `articlesRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  articlesRemove(params: ArticlesRemove$Params, context?: HttpContext): Observable<void> {
    return this.articlesRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `articlesUpdate()` */
  static readonly ArticlesUpdatePath = '/api/articles/{id}';

  /**
   * Update article.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `articlesUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  articlesUpdate$Response(params: ArticlesUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return articlesUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Update article.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `articlesUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  articlesUpdate(params: ArticlesUpdate$Params, context?: HttpContext): Observable<void> {
    return this.articlesUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
