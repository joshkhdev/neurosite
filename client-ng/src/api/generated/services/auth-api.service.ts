/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiBaseService } from '../api-base-service';
import { ApiConfiguration } from '../api-configuration';
import { ApiStrictHttpResponse } from '../api-strict-http-response';

import { authLogout } from '../fn/auth/auth-logout';
import { AuthLogout$Params } from '../fn/auth/auth-logout';
import { authRefresh } from '../fn/auth/auth-refresh';
import { AuthRefresh$Params } from '../fn/auth/auth-refresh';
import { AuthSessionDto } from '../models/auth-session-dto';
import { authSignIn } from '../fn/auth/auth-sign-in';
import { AuthSignIn$Params } from '../fn/auth/auth-sign-in';
import { authSignUp } from '../fn/auth/auth-sign-up';
import { AuthSignUp$Params } from '../fn/auth/auth-sign-up';

@Injectable({ providedIn: 'root' })
export class AuthApiService extends ApiBaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authSignUp()` */
  static readonly AuthSignUpPath = '/api/auth/sign-up';

  /**
   * Register as a new user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authSignUp()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authSignUp$Response(params: AuthSignUp$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<AuthSessionDto>> {
    return authSignUp(this.http, this.rootUrl, params, context);
  }

  /**
   * Register as a new user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authSignUp$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authSignUp(params: AuthSignUp$Params, context?: HttpContext): Observable<AuthSessionDto> {
    return this.authSignUp$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<AuthSessionDto>): AuthSessionDto => r.body)
    );
  }

  /** Path part for operation `authSignIn()` */
  static readonly AuthSignInPath = '/api/auth/sign-in';

  /**
   * Log in your account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authSignIn()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authSignIn$Response(params: AuthSignIn$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<AuthSessionDto>> {
    return authSignIn(this.http, this.rootUrl, params, context);
  }

  /**
   * Log in your account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authSignIn$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authSignIn(params: AuthSignIn$Params, context?: HttpContext): Observable<AuthSessionDto> {
    return this.authSignIn$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<AuthSessionDto>): AuthSessionDto => r.body)
    );
  }

  /** Path part for operation `authLogout()` */
  static readonly AuthLogoutPath = '/api/auth/logout';

  /**
   * Logout from current session.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authLogout()` instead.
   *
   * This method doesn't expect any request body.
   */
  authLogout$Response(params?: AuthLogout$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return authLogout(this.http, this.rootUrl, params, context);
  }

  /**
   * Logout from current session.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authLogout$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authLogout(params?: AuthLogout$Params, context?: HttpContext): Observable<void> {
    return this.authLogout$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authRefresh()` */
  static readonly AuthRefreshPath = '/api/auth/refresh';

  /**
   * Refresh current session.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRefresh()` instead.
   *
   * This method doesn't expect any request body.
   */
  authRefresh$Response(params?: AuthRefresh$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<AuthSessionDto>> {
    return authRefresh(this.http, this.rootUrl, params, context);
  }

  /**
   * Refresh current session.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRefresh$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authRefresh(params?: AuthRefresh$Params, context?: HttpContext): Observable<AuthSessionDto> {
    return this.authRefresh$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<AuthSessionDto>): AuthSessionDto => r.body)
    );
  }

}
