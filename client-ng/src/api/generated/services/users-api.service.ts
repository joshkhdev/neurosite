/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiBaseService } from '../api-base-service';
import { ApiConfiguration } from '../api-configuration';
import { ApiStrictHttpResponse } from '../api-strict-http-response';

import { UserProfileResponseDto } from '../models/user-profile-response-dto';
import { UserResponseDto } from '../models/user-response-dto';
import { usersBlock } from '../fn/users/users-block';
import { UsersBlock$Params } from '../fn/users/users-block';
import { usersFindAll } from '../fn/users/users-find-all';
import { UsersFindAll$Params } from '../fn/users/users-find-all';
import { usersFindOne } from '../fn/users/users-find-one';
import { UsersFindOne$Params } from '../fn/users/users-find-one';
import { usersGetProfile } from '../fn/users/users-get-profile';
import { UsersGetProfile$Params } from '../fn/users/users-get-profile';
import { usersGetUserProfile } from '../fn/users/users-get-user-profile';
import { UsersGetUserProfile$Params } from '../fn/users/users-get-user-profile';
import { usersUnblock } from '../fn/users/users-unblock';
import { UsersUnblock$Params } from '../fn/users/users-unblock';
import { usersUpdate } from '../fn/users/users-update';
import { UsersUpdate$Params } from '../fn/users/users-update';
import { usersUpdateEmail } from '../fn/users/users-update-email';
import { UsersUpdateEmail$Params } from '../fn/users/users-update-email';
import { usersUpdateRole } from '../fn/users/users-update-role';
import { UsersUpdateRole$Params } from '../fn/users/users-update-role';

@Injectable({ providedIn: 'root' })
export class UsersApiService extends ApiBaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `usersFindAll()` */
  static readonly UsersFindAllPath = '/api/users';

  /**
   * Get all users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersFindAll$Response(params?: UsersFindAll$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<Array<UserResponseDto>>> {
    return usersFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersFindAll(params?: UsersFindAll$Params, context?: HttpContext): Observable<Array<UserResponseDto>> {
    return this.usersFindAll$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<Array<UserResponseDto>>): Array<UserResponseDto> => r.body)
    );
  }

  /** Path part for operation `usersFindOne()` */
  static readonly UsersFindOnePath = '/api/users/{uuid}';

  /**
   * Get user by uuid.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersFindOne$Response(params: UsersFindOne$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<UserResponseDto>> {
    return usersFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user by uuid.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersFindOne(params: UsersFindOne$Params, context?: HttpContext): Observable<UserResponseDto> {
    return this.usersFindOne$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<UserResponseDto>): UserResponseDto => r.body)
    );
  }

  /** Path part for operation `usersBlock()` */
  static readonly UsersBlockPath = '/api/users/{uuid}';

  /**
   * Block user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersBlock()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersBlock$Response(params: UsersBlock$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return usersBlock(this.http, this.rootUrl, params, context);
  }

  /**
   * Block user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersBlock$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersBlock(params: UsersBlock$Params, context?: HttpContext): Observable<void> {
    return this.usersBlock$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersUpdateRole()` */
  static readonly UsersUpdateRolePath = '/api/users/{uuid}/role';

  /**
   * Update user role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersUpdateRole()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersUpdateRole$Response(params: UsersUpdateRole$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return usersUpdateRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersUpdateRole$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersUpdateRole(params: UsersUpdateRole$Params, context?: HttpContext): Observable<void> {
    return this.usersUpdateRole$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersUnblock()` */
  static readonly UsersUnblockPath = '/api/users/{uuid}/unblock';

  /**
   * Unblock user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersUnblock()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersUnblock$Response(params: UsersUnblock$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return usersUnblock(this.http, this.rootUrl, params, context);
  }

  /**
   * Unblock user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersUnblock$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersUnblock(params: UsersUnblock$Params, context?: HttpContext): Observable<void> {
    return this.usersUnblock$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersGetUserProfile()` */
  static readonly UsersGetUserProfilePath = '/api/users/profile';

  /**
   * Get current user profile.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersGetUserProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUserProfile$Response(params?: UsersGetUserProfile$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<UserProfileResponseDto>> {
    return usersGetUserProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * Get current user profile.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersGetUserProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUserProfile(params?: UsersGetUserProfile$Params, context?: HttpContext): Observable<UserProfileResponseDto> {
    return this.usersGetUserProfile$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<UserProfileResponseDto>): UserProfileResponseDto => r.body)
    );
  }

  /** Path part for operation `usersUpdate()` */
  static readonly UsersUpdatePath = '/api/users/profile';

  /**
   * Update current user profile.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersUpdate$Response(params: UsersUpdate$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return usersUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Update current user profile.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersUpdate(params: UsersUpdate$Params, context?: HttpContext): Observable<void> {
    return this.usersUpdate$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersUpdateEmail()` */
  static readonly UsersUpdateEmailPath = '/api/users/profile/email';

  /**
   * Update current user email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersUpdateEmail()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersUpdateEmail$Response(params: UsersUpdateEmail$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return usersUpdateEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Update current user email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersUpdateEmail$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersUpdateEmail(params: UsersUpdateEmail$Params, context?: HttpContext): Observable<void> {
    return this.usersUpdateEmail$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersGetProfile()` */
  static readonly UsersGetProfilePath = '/api/users/profile/{name}';

  /**
   * Get user profile by name.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersGetProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetProfile$Response(params: UsersGetProfile$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<UserProfileResponseDto>> {
    return usersGetProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user profile by name.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersGetProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetProfile(params: UsersGetProfile$Params, context?: HttpContext): Observable<UserProfileResponseDto> {
    return this.usersGetProfile$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<UserProfileResponseDto>): UserProfileResponseDto => r.body)
    );
  }

}
